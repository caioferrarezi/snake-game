{"version":3,"sources":["webpack://snake-game/./src/utils/constants.js","webpack://snake-game/./src/utils/canvas.js","webpack://snake-game/./src/game/snake/body-piece.js","webpack://snake-game/./src/game/snake/index.js","webpack://snake-game/./src/game/fruit/index.js","webpack://snake-game/./src/game/screens/game-over/index.js","webpack://snake-game/./src/index.js","webpack://snake-game/./src/game/index.js"],"names":["KEYS","LEFT","UP","RIGHT","DOWN","ACTION","this","_screen","_context","_pixelSize","width","height","document","createElement","Math","ceil","getContext","body","insertAdjacentElement","randomX","floor","random","randomY","x","y","BodyPiece","prev","next","Snake","_pos","canvas","_vel","_size","_color","_init","_head","_tail","_push","tail","head","cur","is","fruit","i","_add","_pop","Fruit","GameOverScreen","score","game","_state","_score","_snake","_fruit","_gameOverScreen","_setControls","window","onkeydown","_onKeyDown","bind","keyCode","preventDefault","includes","moveLeft","moveUp","moveRight","moveDown","_gameOver","update","hitWall","bitten","eat","grow","_clear","_showScore","show","time1","Date","now","time2","draw","requestAnimationFrame"],"mappings":"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","file":"main-550413e667a2ccf1d7f7.js","sourcesContent":["export const PIXEL_SIZE = 15;\n\nexport const COLORS = {\n  BACKGROUND: '#F7F7FF',\n  SNAKE: '#070600',\n  FRUIT: '#EA526F'\n}\n\nexport const KEYS = {\n  LEFT: [37, 65],\n  UP: [38, 87],\n  RIGHT: [39, 68],\n  DOWN: [40, 83],\n  ACTION: [13, 32]\n}\n","import { PIXEL_SIZE } from 'utils/constants';\n\nlet canvas;\n\nclass Canvas {\n  constructor() {\n    this._screen;\n    this._context;\n    this._pixelSize;\n  }\n\n  create(width, height) {\n    this._screen = document.createElement('canvas');\n\n    this._screen.width = width;\n    this._screen.height = height;\n\n    this._pixelSize = Math.ceil(width / height) * 10;\n\n    this._context = this._screen.getContext('2d');\n\n    document.body.insertAdjacentElement('afterbegin', this._screen);\n  }\n\n  get width() {\n    return this._screen.width;\n  }\n\n  get height() {\n    return this._screen.height;\n  }\n\n  get pixelSize() {\n    return this._pixelSize;\n  }\n\n  get context() {\n    return this._context;\n  }\n\n  getRandomPosition() {\n    const randomX = Math.floor(Math.random() * this.width);\n    const randomY = Math.floor(Math.random() * this.height);\n\n    const x = randomX - (randomX % this._pixelSize);\n    const y = randomY - (randomY % this._pixelSize);\n\n    return { x, y };\n  }\n}\n\ncanvas = new Canvas();\n\nexport default canvas;\n","export default class BodyPiece {\n  constructor(x, y, prev = null, next = null) {\n    this.x = x;\n    this.y = y;\n    this.prev = prev;\n    this.next = next;\n  }\n}\n","import canvas from 'utils/canvas';\nimport { COLORS, KEYS } from 'utils/constants';\n\nimport BodyPiece from 'game/snake/body-piece'\n\nexport default class Snake {\n  constructor() {\n    this._pos = canvas.getRandomPosition();\n    this._vel = { x: 0, y: 0 };\n\n    this._size = canvas.pixelSize;\n    this._color = COLORS.SNAKE;\n\n    this._init();\n  }\n\n  _init() {\n    const { x, y } = this._pos\n\n    this._head = null;\n    this._tail = null;\n\n    this._push(x, y);\n  }\n\n  _push(x, y) {\n    if (!this._head) {\n      this._head = new BodyPiece(x, y);\n      this._tail = this._head;\n\n      return;\n    }\n\n    let tail = new BodyPiece(x, y, this._tail, null);\n    this._tail.next = tail;\n\n    this._tail = tail;\n  }\n\n  _add(x, y) {\n    if (!this._head) {\n      this._head = new BodyPiece(x, y);\n      this._tail = this._head;\n\n      return;\n    }\n\n    let head = new BodyPiece(x, y, null, this._head);\n    this._head.prev = head;\n\n    this._head = head;\n  }\n\n  _pop() {\n    this._tail = this._tail.prev;\n    this._tail.next = null;\n  }\n\n  moveLeft() {\n    if (this._vel.x === this._size) return;\n\n    this._vel = { x: -this._size, y: 0 };\n  }\n\n  moveUp() {\n    if (this._vel.y === this._size) return;\n\n    this._vel = { x: 0, y: -this._size };\n  }\n\n  moveRight() {\n    if (this._vel.x === -this._size) return;\n\n    this._vel = { x: this._size, y: 0 };\n  }\n\n  moveDown() {\n    if (this._vel.y === -this._size) return;\n\n    this._vel = { x: 0, y: this._size };\n  }\n\n  is(x, y) {\n    for (let cur = this._head.next; cur !== null && cur.next !== null; cur = cur.next) {\n      if (cur.x === x && cur.y === y)\n        return true;\n    }\n\n    return false;\n  }\n\n  bitten() {\n    let { x, y } = this._head;\n\n    return this.is(x, y);\n  }\n\n  hitWall() {\n    const { x, y } = this._head;\n\n    return (\n      x < 0 ||\n      y < 0 ||\n      x > canvas.width - canvas.pixelSize ||\n      y > canvas.height - canvas.pixelSize\n    )\n  }\n\n  eat(fruit) {\n    const { x, y } = this._head;\n\n    return x === fruit.x && y === fruit.y;\n  }\n\n  grow() {\n    let tail = this._tail;\n\n    for (let i = 0 ; i < 5; i++) {\n      this._push(tail.x, tail.y);\n    }\n  }\n\n  update() {\n    this._pos.x += this._vel.x;\n    this._pos.y += this._vel.y;\n\n    this._add(this._pos.x, this._pos.y);\n    this._pop();\n  }\n\n  show() {\n    for (let cur = this._head; cur !== null; cur = cur.next) {\n      canvas.context.fillStyle = this._color;\n      canvas.context.fillRect(cur.x, cur.y, this._size, this._size);\n    }\n  }\n}\n","import canvas from 'utils/canvas';\nimport { COLORS } from 'utils/constants';\n\nexport default class Fruit {\n  constructor () {\n    this._size = canvas.pixelSize;\n    this._color = COLORS.FRUIT;\n    this._pos = canvas.getRandomPosition();\n  }\n\n  get x() {\n    return this._pos.x;\n  }\n\n  get y() {\n    return this._pos.y;\n  }\n\n  update() {\n    this._pos = canvas.getRandomPosition();\n  }\n\n  show() {\n    canvas.context.fillStyle = this._color;\n    canvas.context.fillRect(this._pos.x, this._pos.y, this._size, this._size);\n  }\n}\n","import canvas from 'utils/canvas';\n\nexport default class GameOverScreen {\n  show(score) {\n    const x = canvas.width / 2;\n    const y = canvas.height / 2;\n\n    canvas.context.fillStyle = '#222222';\n    canvas.context.textAlign = 'center';\n    canvas.context.textBaseline = 'middle';\n    canvas.context.font = `normal 48px VT323, monospace`;\n    canvas.context.fillText(`You've scored: ${score}`, x, y - 30);\n    canvas.context.font = `normal 32px VT323, monospace`;\n    canvas.context.fillText(`Press [Enter] or [Space] to restart`, x, y + 30);\n  }\n}\n","import { FPS } from 'utils/constants';\nimport Game from 'game';\n\nconst game = new Game();\n\nlet time1 = Date.now();\nlet time2 = Date.now();\nlet elapsedTime = 0;\n\nlet frameCount = 0;\n\nfunction setup() {\n  frameCount = 0;\n\n  draw();\n}\n\nfunction draw() {\n  time2 = Date.now();\n  elapsedTime = time2 - time1;\n\n  if (elapsedTime > 100) {\n    time1 = time2;\n\n    game.update();\n    game.show();\n  }\n\n  requestAnimationFrame(draw);\n}\n\nsetup();\n","import canvas from 'utils/canvas';\nimport { COLORS, KEYS } from 'utils/constants';\n\nimport Snake from 'game/snake';\nimport Fruit from 'game/fruit';\n\nimport GameOverScreen from 'game/screens/game-over';\n\nexport default class Game {\n  constructor() {\n    canvas.create(800, 600);\n\n    this._init();\n  }\n\n  _init() {\n    this._state = 'playing';\n    this._score = 0;\n\n    this._snake = new Snake();\n    this._fruit = new Fruit();\n\n    this._gameOverScreen = new GameOverScreen();\n\n    this._setControls();\n  }\n\n  _clear() {\n    canvas.context.fillStyle = COLORS.BACKGROUND;\n    canvas.context.fillRect(0, 0, canvas.width, canvas.height);\n  }\n\n  _showScore() {\n    canvas.context.fillStyle = '#222222';\n    canvas.context.textAlign = 'left';\n    canvas.context.textBaseline = 'top';\n    canvas.context.font = `32px VT323, monospace`;\n    canvas.context.fillText(`Score: ${this._score}`, canvas.pixelSize, canvas.pixelSize);\n  }\n\n  _setControls() {\n    window.onkeydown = this._onKeyDown.bind(this)\n  }\n\n  _onKeyDown({ keyCode, preventDefault }) {\n    if (KEYS.LEFT.includes(keyCode)) {\n      return this._snake.moveLeft();\n    }\n\n    if (KEYS.UP.includes(keyCode)) {\n      return this._snake.moveUp();\n    }\n\n    if (KEYS.RIGHT.includes(keyCode)) {\n      return this._snake.moveRight();\n    }\n\n    if (KEYS.DOWN.includes(keyCode)) {\n      return this._snake.moveDown();\n    }\n\n    if (KEYS.ACTION.includes(keyCode)) {\n      if (this._gameOver === false) return;\n\n      this._init();\n    }\n  }\n\n  update() {\n    if (this._state !== 'playing') return;\n\n    this._snake.update();\n\n    if (this._snake.hitWall() || this._snake.bitten()) {\n      this._state = 'game-over';\n    }\n\n    if (this._snake.eat(this._fruit)) {\n      this._snake.grow();\n      this._fruit.update();\n\n      while (this._snake.is(this._fruit.x, this._fruit.y)) {\n        this._fruit.update();\n      }\n\n      this._score++;\n    }\n  }\n\n  show() {\n    this._clear();\n\n    if (this._state === 'game-over') {\n      this._gameOverScreen.show(this._score);\n      return;\n    }\n\n    this._showScore();\n\n    this._snake.show();\n    this._fruit.show();\n  }\n}\n"],"sourceRoot":""}